// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  password      String?
  image         String?
  kycVerified    Boolean   @default(false)
  accounts      Account[]
  sessions      Session[]
  userRoles     UserRole[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  contact       Contact?
  cards          Card[]
  payments       Payment[]
  supportTickets SupportTicket[]
}

model Contact {
  id        String   @id @default(cuid())
  email     String   @unique
  phone     String?
  address   String?
  city      String?
  state     String?
  zip       String?
  country   String?
  user      User     @relation(fields: [userId], references: [id])
  userId    String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Role {
  id          String     @id @default(cuid())
  name        String     @unique
  description String?
  userRoles   UserRole[]
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
}

model UserRole {
  id        String   @id @default(cuid())
  userId    String
  roleId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  role      Role     @relation(fields: [roleId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, roleId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Card {
  id             String        @id @default(cuid())
  userId         String
  cardNumber     String        @unique
  cardholderName String
  expiryMonth    Int
  expiryYear     Int
  cvv            String
  creditLimit    Float
  currentBalance Float         @default(0)
  isActive       Boolean       @default(true)
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt

  user         User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  transactions Transaction[]
  statements   Statement[]
  payments     Payment[]
  reward       Reward?
}

model Transaction {
  id          String           @id @default(cuid())
  cardId      String
  amount      Float
  merchant    String
  description String?
  timestamp   DateTime         @default(now())
  status      TransactionStatus
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt

  card Card @relation(fields: [cardId], references: [id], onDelete: Cascade)
}

model Statement {
  id           String   @id @default(cuid())
  cardId       String
  billingDate  DateTime
  dueDate      DateTime
  totalAmount  Float
  minimumDue   Float
  paid         Boolean  @default(false)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  card Card @relation(fields: [cardId], references: [id], onDelete: Cascade)
}

model Payment {
  id        String        @id @default(cuid())
  cardId    String
  userId    String
  amount    Float
  method    PaymentMethod
  paidAt    DateTime      @default(now())
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt

  card Card @relation(fields: [cardId], references: [id], onDelete: Cascade)
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Reward {
  id          String       @id @default(cuid())
  cardId      String       @unique
  points      Int         @default(0)
  lastUpdated DateTime    @default(now())
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  card        Card         @relation(fields: [cardId], references: [id], onDelete: Cascade)
  redemptions Redemption[]
}

model Redemption {
  id          String   @id @default(cuid())
  rewardId    String
  pointsUsed  Int
  description String
  redeemedAt  DateTime @default(now())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  reward Reward @relation(fields: [rewardId], references: [id], onDelete: Cascade)
}

model SupportTicket {
  id             String    @id @default(uuid())
  user           User      @relation(fields: [userId], references: [id])
  userId         String
  issueType      String
  description    String
  status         TicketStatus @default(OPEN)
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
}

enum TicketStatus {
  OPEN
  IN_PROGRESS
  RESOLVED
  CLOSED
}

enum TransactionStatus {
  PENDING
  SUCCESS
  FAILED
}

enum PaymentMethod {
  CARD
  UPI
  NEFT
  AUTO_DEBIT
}

model AuditLog {
  id        String   @id @default(cuid())
  userId    String?
  action    String
  details   String?
  ipAddress String?
  userAgent String?
  createdAt DateTime @default(now())

  user User? @relation(fields: [userId], references: [id], onDelete: SetNull)
}

model CardLock {
  id        String   @id @default(cuid())
  cardId    String
  reason    String
  lockedAt  DateTime @default(now())
  isActive  Boolean  @default(true)

  card Card @relation(fields: [cardId], references: [id], onDelete: Cascade)
}

model Notification {
  id        String   @id @default(cuid())
  userId    String
  type      String
  message   String
  read      Boolean  @default(false)
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

